<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ww.mvc.board.model.dao.BoardMapper">

	<sql id="boardListSql">
		SELECT B.BOARD_NO,
		E.EMP_ID,
		B.BOARD_WRITER,
		B.BOARD_TITLE,
		B.BOARD_CONTENT,
		B.BOARD_CREATED,
		B.BOARD_MODIFIED,
		B.BOARD_HITS
		FROM BOARD B
		JOIN EMPLOYEE E ON(B.EMP_NO = E.EMP_NO)
	</sql>
	
	<!-- ▼ Board ResultMap -->
  	<resultMap type="Board" id="boardListResultMap">
  		<id property="no" column="BOARD_NO"/>
  		<result property="empNo" column="EMP_NO"/>
  		<result property="writer" column="BOARD_WRITER"/>
  		<result property="title" column="BOARD_TITLE"/>
  		<result property="content" column="BOARD_CONTENT"/>	
  		<result property="createDate" column="BOARD_CREATED"/>
  		<result property="modifyDate" column="BOARD_MODIFIED"/>
  		<result property="hits" column="BOARD_HITS"/>
  		<result property="replyCount" column="COMMENT_COUNT"/>
  	</resultMap>
  	
  	<!-- ▼ Reply ResultMap -->
	<resultMap type="Reply" id="replyResultMap">
		<id property="no" column="COMMENT_NO"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="empNo" column="EMP_NO"/>
		<result property="writer" column="COMMENT_WRITER"/>
		<result property="content" column="COMMENT_CONTENT"/>
		<result property="createDate" column="B_COMMENT_CREATED"/>
		<result property="modifyDate" column="B_COMMENT_MODIFIED"/>
	</resultMap>

	<resultMap type="Board" extends="boardListResultMap" id="boardDetailResultMap">
		<collection property="replies" javaType="arraylist" resultMap="replyResultMap"/>
	</resultMap>
  	
	<!-- 페이징 -->
	<select id="getBoardCount" parameterType="map" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD
		<choose>
			<when test="searchType = title">
				AND B.BOARD_TITLE LIKE '%' || #{title} ||'%'
			</when>
			<when test="searchType = writer">
				AND E.EMP_ID LIKE '%' || #{writer} ||'%'
			</when>
			<when test="searchType = content">
				AND B.BOARD_CONTENT LIKE '%' || #{content} ||'%'
			</when>
		</choose>
	</select>

	<select id="findAll" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql" />

		<choose>
			<when test="searchType = title">
				AND B.BOARD_TITLE LIKE '%' || #{title} ||'%'
			</when>
			<when test="searchType = writer">
				AND E.EMP_ID LIKE '%' || #{writer} ||'%'
			</when>
			<when test="searchType = content">
				AND B.BOARD_CONTENT LIKE '%' || #{content} ||'%'
			</when>
		</choose>
		ORDER BY B.BOARD_NO DESC
	</select>
	
	
	<!-- 게시글 검색 -->
	<select id="searchCount" parameterType="map" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD
			<trim prefix="WHERE" prefixOverrides="AND|OR">
				<if test="searchType=='title' and keyword != null and keyword != '' ">
					AND B.BOARD_TITLE LIKE '%' || #{keyword}  || '%'
				</if>
				<if test="searchType=='content' and keyword != null and keyword != '' ">
					AND B.BOARD_CONTENT LIKE '%' || #{keyword}  || '%'
				</if>
				<if test="searchType=='writer' and keyword != null and keyword != '' ">
					AND WHERE E.EMP_ID LIKE '%' || #{keyword}  || '%'
				</if>
			</trim>
	</select>
	
	<select id="searchBoard" parameterType="map" resultMap="boardListResultMap">
		<include refid="boardListSql" />

		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="searchType=='title' and keyword != null and keyword != '' ">
				AND B.BOARD_TITLE LIKE '%' || #{keyword}  || '%'
			</if>
			<if test="searchType=='content' and keyword != null and keyword != '' ">
				AND B.BOARD_CONTENT LIKE '%' || #{keyword}  || '%'
			</if>
			<if test="searchType=='writer' and keyword != null and keyword != '' ">
				AND E.EMP_ID LIKE '%' || #{keyword}  || '%'
			</if>	
		</trim>
		ORDER BY B.BOARD_NO DESC
	</select>
	
	
	<!-- 게시글 상세조회 
	-->
  	<select id="selectBoardByNo" parameterType="_int" resultMap="boardDetailResultMap">
			SELECT B.BOARD_NO AS,
			       B.BOARD_TITLE, 
			       B.EMP_NO, 
			       B.BOARD_WRITER,
			       E.EMP_ID, 
			       B.BOARD_HITS, 
			       B.BOARD_CONTENT,
			       B.BOARD_CREATED, 
			       B.BOARD_MODIFIED,
			       C.COMMENT_NO, 
			       C.COMMENT_WRITER,
			       C.BOARD_NO, 
			       C.COMMENT_CONTENT, 
			       C.EMP_NO,
			       E2.EMP_ID, 
			       C.B_COMMENT_CREATED, 
			       C.B_COMMENT_MODIFIED,
			       B.COMMENT_COUNT
			FROM BOARD B
			JOIN EMPLOYEE E ON(B.EMP_NO = E.EMP_NO)
			LEFT OUTER JOIN BOARD_COMMENT C ON(B.BOARD_NO = C.BOARD_NO)
			LEFT OUTER JOIN EMPLOYEE E2 ON(C.EMP_NO = E2.EMP_NO)
			WHERE B.BOARD_NO = #{no}
  	 </select>
	
	
	<!-- 게시글 작성 -->
	<insert id="insertBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="no" keyColumn="BOARD_NO">
		INSERT INTO BOARD(
			BOARD_NO,
			BOARD_WRITER,
			EMP_NO,
			BOARD_TITLE,
			BOARD_CONTENT,
			BOARD_CREATED,
			BOARD_MODIFIED,
			BOARD_HITS
		) VALUES(
			SEQ_BOARD_NO.NEXTVAL,
			#{writer},
			#{empNo},
			#{title},
			#{content},
			DEFAULT,
			DEFAULT,
			DEFAULT
		)
	</insert>
	
	<!-- 파일 등록 -->
	<insert id="insertFile" parameterType="BoardAttach">
		INSERT INTO BOARD_ATTACH(
			FILE_NO,
			BOARD_NO,
			ORIGINAL_FILENAME,
			RENAMED_FILENAME,
			FILE_UPLOADPATH,
			FILE_SIZE,
			FILE_TYPE,
			REG_DATE
		) VALUES (
			SEQ_BOARDATTACH_NO.NEXTVAL,
			#{boardNo},
			#{originalFileName},
			#{renamedFileName},
			#{uploadPath},
			#{fileSize},
			#{fileType},
			DEFAULT
		)
	</insert>
	
	<!-- 게시글 수정 -->
	<update id="updateBoard" parameterType="Board">
		UPDATE BOARD
		<trim prefix="SET" suffixOverrides=",">
			<if test="title != null">
				BOARD_TITLE = #{title},
			</if>
			<if test="content != null">
				BOARD_CONTENT = #{content},
			</if>
				BOARD_MODIFIED = SYSDATE
		</trim>
		WHERE BOARD_NO = #{no}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="deleteBoard" parameterType="Board">
		DELETE FROM BOARD WHERE BOARD_NO = #{no}
	</delete>

	<!-- 댓글 개수 -->
	<select id="getReplyCount" parameterType="map" resultType="_int">
		SELECT COUNT(COMMENT_NO)
		FROM BOARD_COMMENT
		WHERE BOARD_NO = #{no}
	</select>
	
	<update id="updateReplyCount" parameterType="_int">
		UPDATE BOARD 
			SET COMMENT_COUNT = (
				SELECT COUNT(COMMENT_NO) 
				FROM BOARD_COMMENT 
				WHERE BOARD_NO = #{no} 
			)
			WHERE BOARD_NO = #{no}
	
	</update>
	
	<!-- 댓글 등록 -->
	<insert id="insertReply" parameterType="map" useGeneratedKeys="true" keyProperty="no" keyColumn="COMMENT_NO">
		INSERT INTO BOARD_COMMENT (
			COMMENT_NO,
			BOARD_NO,
			EMP_NO,
			COMMENT_WRITER,
			COMMENT_CONTENT,
			B_COMMENT_CREATED,
			B_COMMENT_MODIFIED
		) VALUES (
			SEQ_COMMENT_NO.NEXTVAL,
			#{boardNo},
			#{empNo},
			#{writer},
			#{content},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	
	<!-- 댓글 수정 
	-->
	<update id="updateReply" parameterType="map">
		UPDATE BOARD_COMMENT
	      SET 
	         COMMENT_CONTENT = #{content},
	         B_COMMENT_MODIFIED = SYSDATE 
	      WHERE 
	         COMMENT_NO = #{no}
	</update>
	
	<!-- 댓글 삭제 -->
	<delete id="deleteReply" parameterType="Reply" >
		DELETE FROM BOARD_COMMENT WHERE COMMENT_NO = #{no}
	</delete>
	
	
</mapper>